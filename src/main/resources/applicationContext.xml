<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"

       xsi:schemaLocation="
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
      	http://www.springframework.org/schema/beans
      	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      	http://www.springframework.org/schema/tx
      	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      	http://www.springframework.org/schema/mvc
      	http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 自动扫描base-package下的java文件,
             如果扫描到有@Component @Controller@Service等这些注解的类,
             则把这些类注册为bean -->
    <context:component-scan base-package="com.btw.parser.*" />

    <mvc:default-servlet-handler/>
    <mvc:annotation-driven/>

    <bean id="manager" class="com.fate.schedule.SteerableScheduleManager">
        <constructor-arg name="poolSize" value="35" />
        <constructor-arg name="autoOpen" value="false"/>
    </bean>
    <!-- implementor提供者
    A：直接给定服务器提供者类名
    B：设置为容器中得一个bean
    -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/dev/jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 配置DataSource数据源 -->
    <bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="100" />
        <property name="maxIdle" value="30" />
        <property name="maxWait" value="1000" />
        <property name="defaultAutoCommit" value="true" />
        <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="60" />
    </bean>

    <!-- 要开启Spring的事务处理,在Spring的XML配置文件中简单创建一个DataSourceTransactionManager对象 -->
    <!-- transactionManager指定的 DataSource 必须和用来创建 SqlSessionFactoryBean 的 是同一个数据源 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource1" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
          p:dataSource-ref="dataSource1" />

    <!-- 对@Transactional这个注解进行的驱动，这是基于注解的方式使用事务配置声明，
                    这样在具体应用中可以指定对哪些方法使用事务。 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置映射文件 -->
        <property name="mapperLocations" >
            <list>
                <value>classpath:com/btw/parser/mapper/*.xml</value>
            </list>
        </property>
        <!-- 把数据源注入给Session工厂 -->
        <property name="dataSource" ref="dataSource1" />
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
        <property name="basePackage" value="com.btw.parser.mapper"/>
    </bean>
</beans>